//2.1.1 变量声明
var v1 int
var v2 string
var v3 [10]int //数组
var v4 []int //数组切片
var v5 struct {
    f int
}
var v6 *int //指针
var v7 map[string]int //map,key为string类型，value为int类型
var v8 func(a, int) int

var (
    v1 int
    v2 string
)

//变量初始化
var v1 int = 10 //正确方式1
var v2 = 10    //正确方式2，编译器推导v2类型
v3 := 10    //正确方式3，编译器推导v3类型

/*
出现在:=左侧的变量不应该是已经被声明过的,否则会导致编译错误,比如下面这个写法:
    var i int i := 2
    会导致类似如下的编译错误:
        no new variables on left side of :=
*/


//2.1.3 变量赋值
var v10 int
v10 = 123

//多重赋值
i, j = j, i


//2.1.4 匿名变量
func GetName() (firstName, lastName, nickName string) {
    return "May", "Chan", "Chibi Maruko"
}
//若只想获得nickName,则函数调用语句可以用如下方式编写:
    _, _. nickName := GetName


//2.2.2 常量定义
const Pi float64 = 3.14
const zero = 0.0
const (
    size int64 = 1024
    eof = -1   //无类型常量
)
const u, v float32 = 0, 3 // u = 0.0, v = 3.0 常量的多重赋值
const a, b, c = 3, 4, "foo"
//a = 3, b = 4, c = "foo",无类型整型和字符串常量

const mask = 1 << 3
/*
由于常量的赋值是一个编译期行为,所以右值不能出现任何需要运行期才能得出结果的表达
式,比如试图以如下方式定义常量就会导致编译错误:
    const Home = os.GetEnv("HOME") 原因很简单,os.GetEnv()
    只有在运行期才能知道返回结果,在编译期并不能确定,所以无法作为常量定义的右值。
*/

//2.2.3 预定义常量
const (
    c0 = iota   //iota 被重设为0  c0 == 0
    c1 = iota   //c1 == 1
    c2 = iota   //c2 == 2  
)

//2.2.4 枚举
const (
    Sunday = iota
    Monday
    Tuesday
    Wednesday
    Thursday
    Friday
    Staurday
    numberofDays  //这个常量没有输出
)

//2.3.5 字符串
str := "Hello， 世界"
n := len(str)
for i := 0; i < n; i++{
    ch := str[i] //根据下标取字符串中的字符，类型为byte
}

//2.3.7 数组
//数组声明：
[32]byte //长度为32的数组，每个元素为一个字节
[2*N] struct {x, y, int 32}  //复杂类型数组
[1000] * float64  //指针数组
[3][5]int   //二维数组
[2][2][2]float64 //等同于[2]([2]([2]float64))

1.元素访问:
    for i := 0; i < len(array); i++ {
        fmt.Println("Element", i , "of array is", array[i])
    }

//range关键字
for i, v := range array {
    fmt.Println("Array element [", i, "] = ", v)
}

2.值类型mZ
/*
需要特别注意的是,在Go语言中数组是一个值类型(value type)。所有的值类型变量在赋值,和作为参数传递时都将产生一次复制动作。如果将数组作为函数的参数类型,则在函数调用时该 参数将发生数据复制。因此,在函数体中无法修改传入的数组的内容,因为函数内操作的只是所 传入数组的一个副本。
*/

//eg:
    func modify(array [10]int) {
        array[0] = 10   //试图修改数组的第一个元素
        fmt.Println("In modify(), array values: ",array)   
    }


    func main() {
        array := [5]int {1, 2, 3, 4, 5} //定义并初始化一个数组
        modify(array)  //传递给一个函数，并试图在函数体内修改这个数组的内容
        fmt.Println("In main(), array values: " array)
    }

//该程序的执行结果为：
    In modify(), array values: [10 2 3 4 5]
    In main(), array values: [1 2 3 4 5]

//从执行结果可以看出,函数modify()内操作的那个数组跟main()中传入的数组是两个不同的实例

//2.3.8 数组切片
1.创建数组切片:基于数组
package main
import "fmt"

func main() {
    //先定义一个数组
    var myArray [10]int = [10]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}

    //基于数组创建一个数组切片
    var mySlice []int = myArray[:5]

    fmt.Println("Elements of myArray:")
    for _, v := range myArray {
        fmt.Println (v, " ")
    }
    fmt.Println("\nElements of mySlice:")
    for _,v := range mySlice {
        fmt.Println(v, " ")
    }
    fmt.Println()

}
//运行结果为:
    Elements of myArray: 1 2 3 4 5 6 7 8 9 10
    Elements of mySlice: 12345


